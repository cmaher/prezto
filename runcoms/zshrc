#
# Executes commands at the start of an interactive session.

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

unalias rm
alias rm='nocorrect rm'
unalias cp
alias cp='nocorrect cp'
alias ag='nocorrect ag'

#zsh tweaks
unsetopt AUTO_CD

# Enable VI command line
setopt VI
setopt IGNORE_EOF
bindkey -M vicmd "q" push-line
bindkey -M vicmd "n" vi-backward-char
bindkey -M vicmd "e" vi-down-line-or-history
bindkey -M vicmd "E" vi-join
bindkey -M vicmd "o" vi-up-line-or-history
bindkey -M vicmd "i" vi-forward-char
bindkey -M vicmd "h" vi-insert
bindkey -M vicmd "H" vi-insert-bol
bindkey -M vicmd "k" vi-forward-word-end
bindkey -M vicmd "K" vi-forward-blank-word-end

alias v='vim'

#
#it's globbering time!
setopt NO_CASE_GLOB
setopt NUMERIC_GLOB_SORT
setopt EXTENDED_GLOB

#automatically build the cd stack
setopt AUTO_PUSHD
setopt PUSHD_SILENT
setopt PUSHD_TO_HOME

#History stuff
HISTFILE=~/.history
SAVEHIST=10000
HISTSIZE=10000
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE
setopt HIST_NO_STORE
setopt HIST_VERIFY
setopt EXTENDED_HISTORY
setopt HIST_SAVE_NO_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS

unsetopt SHARE_HISTORY
unsetopt global_rcs

# Customize to your needs...


#dotfiles management
alias ez="vim $HOME/.zshrc"
alias ezl="vim $HOME/.zshrc.local"
alias eze="vim $HOME/.zshenv"
alias ezel="vim $HOME/.zshenv.local"
alias sz="source $HOME/.zshrc; source $HOME/.zshenv"

#list open listen sockects
alias listensocks="lsof -i -P | grep -i listen"
killport () {
  if [ -z $1 ]; then
    echo USAGE: killport PORT_NUMBER
    exit 1
  fi
  pid=$(lsof -i -P | grep -i listen | grep $1 | awk '{print $2}')
  kill -9 $pid
}

#overwrite commands with aliases
alias ls="ls --color=auto"
alias curl="nocorrect noglob curl"

#for git expansion
__git_files () {
	_wanted files expl 'local files' _files
}

# copy current git commit hash to clipboard
function chash {
  local HASH=$(git rev-parse HEAD)
  echo $HASH | pbcopy
  echo $HASH
}

alias g="git"

# bash into running container
function dsh {
  docker exec -it $1 sh
}

# run image with bash as entrypoint
function dish {
  docker run --rm -it --entrypoint=sh $@
}

# Remove all containers with name matching PATTERN
function drmname {
  local PATTERN=$1
  docker ps --format '{{.Names}}' | grep $PATTERN | xargs docker rm -f
}

function drmp {
  docker ps -a | grep $1 | cut -d ' ' -f 1 | xargs docker rm
}

function drmip {
  docker images | grep $1 | awk '{print $3}' | tail -n +2 | xargs docker rmi
}

alias d="docker"
alias dc="docker-compose"
alias dkillall='docker kill $(docker ps -q)'
alias drmall='docker rm $(docker ps -aq)'
alias drmx='drmp Exited'


function mkubed() {
  eval $(minikube docker-env)
}

alias tf='terraform'
alias k='kubectl'
alias kg='kubectl get'
alias kgp='kubectl get pods'
alias kgpan='kubectl get pods --all-namespaces'
alias kgs='kubectl get services'
alias kgn='kubectl get namespaces'
alias kc='kubectl create'
alias kcn='kubectl create namespace'
alias kcf='kubectl create -f'
alias kd='kubectl delete'
alias kdp='kubectl delete pod'
alias kds='kubectl delete service'
alias kdn='kubectl delete namespace'
alias kdf='kubectl delete -f'
alias kdforce='kubectl delete --grace-period=0 --force'
alias kdforceterm="kubectl get pods --all-namespaces | awk '/Terminating/ { print \$1,\$2 }' | xargs -L 1 kubectl delete pods --force --grace-period=0 -n"
alias kl='kubectl logs -f'
alias ks='kubectl describe'
alias ksp='kubectl describe pod'
alias kss='kubectl describe service'
alias ksn='kubectl describe namespace'
alias koc='kubectl config view | grep current-context | cut -d" " -f2'
alias ko='kubectl config'
alias kou='kubectl config use-context'
alias koum='kubectl config use-context minikube'
alias kon='kubectl config set-context $(koc) --namespace'
alias konm='kubectl config set-context minikube --namespace minikbue'
alias mkube='minikube'
alias hic='helm install charts'
alias kbusy='kubectl create -f ${HOME}/opt/k8s/busybox.yaml'
alias cdko='cd $HOME/.kube/config'

function hdall() {
  local context=$1
  if [[ -z "$context" ]]; then
    echo "usage: hdall CONTEXT"
    return 1
  fi
  for r in `helm ls --short --kube-context $context`; do
    helm delete --purge --kube-context $context $r
  done
}

function kdalln() {
  local context=$1
  if [[ -z "$context" ]]; then
    echo "usage: hdall CONTEXT"
    return 1
  fi
  kubectl get namespace --context $context \
    | tail -n+2 \
    | cut -d' ' -f 1 \
    | grep -v 'default\|kube-public\|kube-system' \
    | xargs kubectl delete namespace --context $context
}

function k8s-find-pod() {
  if [ -n "$2" ]; then
    namespace="-n$2"
  fi
  kubectl get pod $namespace | grep $1 | cut -d' ' -f 1
}

function k8s-copy-secret() {
  kubectl get rs,secrets -o json --namespace default | jq ".items[].metadata.namespace = \"$1\"" | kubectl create -f  -
}

function ksh() {
  local pattern=$1
  local -a cmd container namespace
  zparseopts -E x:=cmd c:=container n:=namespace
  local pod=`k8s-find-pod $pattern ${namespace[2]}`
  local exec_cmd=${cmd[2]:-bash}
  kubectl exec -it $namespace $container $pod $exec_cmd
}

function kpf() {
  pattern=$1
  port=$2
  pod=`k8s-find-pod $pattern`
  kubectl port-forward $pod $port:$port
}

function kdns() {
  kubectl delete pod -nkube-system $(k8s-find-pod kube-dns kube-system)
}

function aws-delete-image {
  local snapshot_id=$(aws ec2 describe-images --image-ids=$1 | jq .Images[0].BlockDeviceMappings[0].Ebs.SnapshotId)
  aws ec2 deregister-image --image-id=$1
  aws ec2 delete-snapshot --snapshot-id=${snapshot_id}
}

function mkservice() {
  service=$1
  ip=`mkube ip`
  port=`kubectl get service $service \
    | grep "$service" \
    | tr -s ' ' \
    | cut -d ' ' -f 4 \
    | sed 's~.*:\(.*\)/.*~\1~'`
  if [ -z "$port" ]; then
    echo Service not found
    return
  fi

  url=http://${ip}:${port}

  if [ -n "${@[(r)--url]}" ]; then
    echo $url
  else
    open $url
  fi
}

alias m='make'
alias gr='gradle'

alias rmswp="rm .*.swp"
alias unixtime="date +%s"

# jq from str
function jqs {
	args=($@)
	str=${args[-1]}
	args[-1]=()
	jq $args <<< "$str"
}

# jq on a string with wrong quotes
function jqq {
  args=($@)
  args[-1]=$(sed "s/'/\"/g" <<< "${args[-1]}")
  jqs $args
}

alias jsclean='npm cache clean; rm -r ~/.npm'
alias plane='perl -lane'

function awkc {
  fields=()
  for f in $@; do
    fields+=("\$$f")
    fields+=('" "')
  done
  awk "{ print $fields }"
}

function new-git-remote {
  git init --bare $GIT_REMOTE/$1.git
}

alias octave='octave --no-gui'

# initiate pyenv
function pyv {
  # create the virtual environment if it does not exist
  if [[ ! -e ".pyvenv" ]]; then
    python3 -m venv .pyvenv
  fi
  source .pyvenv/bin/activate
}

alias simplehttpserver='python3 -m http.server'

alias lsh="zsh .local.sh"
alias l="lsh"
alias l.="source .local.sh"
function lsh-new() {
  if [ -e .local.sh ]; then
    echo .local.sh already exists
  else
    cp ~/.zprezto/templates/local.sh.templ ./.local.sh
  fi
}

function loop() {
  while true; do
    $@
    sleep 1
  done
}

function qwerty() {
  mv ~/.vimrc ~/vimrc.bak
  mv ~/.ideavimrc ~/ideavimrc.bak
}

function workman() {
  mv ~/vimrc.bak ~/.vimrc
  mv ~/ideavimrc.bak ~/.ideavimrc
}

alias cdt="cd $HOME/tmp"
alias cdd='cd $DOWNLOADS'

function catscript() {
  cat $(which $1)
}

funcion nvmenv() {
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
}
alias ng='nocorrect ng'

# LAST OF ALL
#Load any local config
if [ -e "$HOME/.zshrc.local" ]; then
    source "$HOME/.zshrc.local"
fi

